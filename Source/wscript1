#!/usr/bin/env python

from waflib import TaskGen


def build(bld):
	tg = SubBuildContext(bld, "SRA_SDK")
	tg()
	tg.execute()

@TaskGen.feature('*')
def method1(self):
	        print('method 1')

@TaskGen.feature('*')
@TaskGen.after('method1')
def method2(self):
	        print('method 2')

def sra_sdk(bld):

	import re
	src = "sra_sdk-2.1.10.tar.gz"
	out = re.sub(".tar.gz$", "", src)
	ld_cmn = out + "/build/ld.linux.cmn.sh"

	bld(
		rule="echo X1; make STATIC=false -C " + out,
		target=out + "/linux",
		source=ld_cmn+"~"
	)

	bld(
		rule="echo X2; sed -i~ s/LIBPATH=''/LIBPATH=found/ ${TGT}",
		target=ld_cmn+"~",
		source=ld_cmn
	)

	bld(
		rule="echo X3; tar xf ${SRC}",
		target=out,
		source=src
	)

# WAF hacks
# ---------
top = out = "."
def configure(cnf):
	pass
from waflib.Build import BuildContext
class SubBuildContext(BuildContext):
	cmd = None
	def __init__(self, bld, path):
		path = bld.path.find_dir(path).abspath()
		super(SubBuildContext, self).__init__(top_dir=path, out_dir=path)
		self.init_dirs()
		self.env = bld.env
	def __call__(self, **kwargs):
		super(SubBuildContext, self).__call__(**kwargs).post()
	def recurse(self, dir):
		pass
	def store(self):
		pass
