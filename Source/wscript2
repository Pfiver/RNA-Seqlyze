#!/usr/bin/env python

from waflib import TaskGen
from waflib.Task import Task

import time
class unpack1(Task):
#	def __init__(self, env=bld):
#		super(unpack1, self).__init__(env=bld.env.derive())
	def run(self):
#		print "before"
		time.sleep(0.1)
		print "after"
	def runnable_status(self):
		print "what ?"
#		return RUN_ME

def build(bld):
	sra_sdk_task_gen = bld(name="SRA_SDK")

	t1 = unpack1(env=bld.env.derive())
	print t1
	bld.add_to_group(t1)

	for i in range(10):
		t1 = sra_sdk_task_gen.create_task("unpack1")
#		bld.add_to_group(t1)

	def unpack(task):
		print task

	def tweak(task):
		print task

	def build(task):
		print task

	for fun in unpack, tweak, build:
		bld(name="sra_sdk: " + fun.__name__, rule=fun)

	bld(rule="echo ls -la ${X}", shell=True, always=True)

#from waflib import TaskGen
#
#def build2(bld):
#	tg = SubBuildContext(bld, "SRA_SDK")
#	tg()
#	tg.execute()
#
#@TaskGen.feature('*')
#def method1(self):
#	        print('method 1')
#
@TaskGen.feature('*')
@TaskGen.after('process_rule')
def order(tg):
	print('order(): ', tg)
	for task in tg.tasks:
		print task
#
#def sra_sdk(bld):
#
#	import re
#	src = "sra_sdk-2.1.10.tar.gz"
#	out = re.sub(".tar.gz$", "", src)
#	ld_cmn = out + "/build/ld.linux.cmn.sh"
#
#	bld(
#		rule="echo X1; make STATIC=false -C " + out,
#		target=out + "/linux",
#		source=ld_cmn+"~"
#	)
#
#	bld(
#		rule="""echo X2; sed -ri~ "/(LIBPATH)=''/\1=found/" ${TGT}""",
#		target=ld_cmn+"~",
#		source=ld_cmn
#	)
#
#	bld(
#		rule="echo X3; tar xf ${SRC}",
#		target=out,
#		source=src
#	)
#
## WAF hacks
## ---------
#top = out = "."
def options(opt):
	opt.load("parallel_debug", tooldir='/data/cache/src/waf/waf-git/waflib/extras')
def configure(cnf):
##	cnf.load('parallel_debug', tooldir='/data/cache/src/waf/waf-git/waflib/extras')
	pass
#from waflib.Build import BuildContext
#class SubBuildContext(BuildContext):
#	cmd = None
#	def add(self, task):
#		return super(SubBuildContext, self).append_to_group(task)
#	def __init__(self, bld, path):
#		path = bld.path.find_dir(path).abspath()
#		super(SubBuildContext, self).__init__(top_dir=path, out_dir=path)
#		self.init_dirs()
#		self.env = bld.env
#	def __call__(self, **kwargs):
#		super(SubBuildContext, self).__call__(**kwargs).post()
#	def recurse(self, dir):
#		pass
#	def store(self):
#		pass
